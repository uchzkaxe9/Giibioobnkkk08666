import cv2
import numpy as np
import insightface
import requests
from flask import Flask, request, jsonify, send_file
import os

# InsightFace model load karein
app = Flask(__name__)
model = insightface.app.FaceAnalysis()
model.prepare(ctx_id=0, nms=0.4)

UPLOAD_FOLDER = 'uploads'
RESULT_FOLDER = 'results'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)

# Function to download image from URL
def download_image(url, save_path):
    try:
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            with open(save_path, 'wb') as file:
                for chunk in response.iter_content(1024):
                    file.write(chunk)
            return True
    except:
        return False
    return False

# Face Swap Function
def face_swap(source_img, target_img):
    faces_src = model.get(source_img)
    faces_tgt = model.get(target_img)

    if len(faces_src) == 0 or len(faces_tgt) == 0:
        return None, "Face not detected!"

    # Pehla face source aur target ka select karein
    src_face = faces_src[0]
    tgt_face = faces_tgt[0]

    # Face Swap Karein
    swapped_img = target_img.copy()
    x, y, w, h = tgt_face.bbox.astype(int)
    swapped_img[y:y+h, x:x+w] = cv2.resize(source_img[src_face.bbox.astype(int)[1]:src_face.bbox.astype(int)[3],
                                                          src_face.bbox.astype(int)[0]:src_face.bbox.astype(int)[2]], (w, h))

    return swapped_img, None

# POST Request for File Uploads
@app.route('/face_swap', methods=['POST'])
def swap_faces():
    if 'source' not in request.files or 'target' not in request.files:
        return jsonify({"error": "Please upload both source and target images!"}), 400

    src_file = request.files['source']
    tgt_file = request.files['target']
    
    src_path = os.path.join(UPLOAD_FOLDER, src_file.filename)
    tgt_path = os.path.join(UPLOAD_FOLDER, tgt_file.filename)

    src_file.save(src_path)
    tgt_file.save(tgt_path)

    source_img = cv2.imread(src_path)
    target_img = cv2.imread(tgt_path)

    swapped_img, error = face_swap(source_img, target_img)

    if error:
        return jsonify({"error": error}), 400

    result_path = os.path.join(RESULT_FOLDER, 'swapped_' + tgt_file.filename)
    cv2.imwrite(result_path, swapped_img)

    return send_file(result_path, mimetype='image/jpeg')

# GET Request for URL-based Face Swap
@app.route('/face_swap', methods=['GET'])
def swap_faces_url():
    source_url = request.args.get('url')
    target_url = request.args.get('target')

    if not source_url or not target_url:
        return jsonify({"error": "Please provide both url=source_image_url & target=target_image_url"}), 400

    src_path = os.path.join(UPLOAD_FOLDER, 'source.jpg')
    tgt_path = os.path.join(UPLOAD_FOLDER, 'target.jpg')

    if not download_image(source_url, src_path) or not download_image(target_url, tgt_path):
        return jsonify({"error": "Failed to download images. Check URLs!"}), 400

    source_img = cv2.imread(src_path)
    target_img = cv2.imread(tgt_path)

    swapped_img, error = face_swap(source_img, target_img)

    if error:
        return jsonify({"error": error}), 400

    result_path = os.path.join(RESULT_FOLDER, 'swapped.jpg')
    cv2.imwrite(result_path, swapped_img)

    return send_file(result_path, mimetype='image/jpeg')

if __name__ == '__main__':
    app.run(debug=True)
